
prepend_path PATH $HOME/.local-stack/bin
prepend_path PATH $HOME/.xmonad/bin
prepend_path PATH $HOME/.cabal/bin

which bat >/dev/null && export PAGER="$(which bat)" && export BAT_PAGER="less -RF" && export MANPAGER="sh -c 'col -b | bat -l man -p'"

export PYTHONPATH="$HOME/.local/lib/python3.7/site-packages${PYTHONPATH:+:${PYTHONPATH}}"

# source $HOME/.local/Modules/init/zsh

alias refresh_bg="feh --bg-fill \"${HOME}/wallpaper/brisbinxmonadwall.png\""

alias fix_xrandr='refresh_monitors && urxvt -e bash -c "killall urxvtd; urxvtd -q -o -f; exit"'

shutoff_all_screens() {
    # shut down all currently connecte screens
    for screen in $(xrandr | awk '$2 ~ /^connected$/ { print $1 }'); do
        xrandr --output "${screen}" --off
    done
    sleep 1
}

monitors_default() {
    if xrandr | grep -q "HDMI-2 connected"; then
        echo "setup @ home (movies)"
        xrandr --output eDP-1 --auto --output HDMI-2 --primary --auto --same-as eDP-1

    elif xrandr | grep -q "DP-2-1 connected"; then
        echo "setup @ office"
        xrandr --output eDP-1 --off --output DP-2-1 --primary --auto --right-of eDP-1 --output DP-2-2 --auto --right-of DP-2-1

    elif xrandr | grep -q "DP-2-2 connected"; then
        echo "setup @ home docking station"
        xrandr --output eDP-1 --off --output DP-2-1 --off --output DP-2-2 --primary --auto --right-of eDP-1

    elif xrandr | grep -q "DVI-D-0 connected"; then
        echo "setup @ office (eGPU)"
        xrandr --output HDMI-0 --auto --primary --output DVI-D-0 --auto --right-of HDMI-0

    else
        echo "setup @ mobile"
        xrandr --output eDP-1 --primary --auto
    fi

    refresh_bg
}

monitors_movie() {
    shutoff_all_screens
    if xrandr | grep -q "HDMI-2 connected"; then
        echo "setup @ home"
        xrandr --output eDP-1 --auto --output HDMI-2 --primary --mode 1920x1080 --same-as eDP-1
    else
        echo "No HDMI-2 connection found."
    fi

    refresh_bg
}

monitors_set_gaming() {
    shutoff_all_screens
    if [ "$#" -ne 2 ]; then
        echo "Usage monitors_set_gaming <setup-name> <mode>"
        return
    fi

# options
setup="$1"
mode="$2"

if xrandr | grep -q "HDMI-2 connected"; then
    echo "${setup}-setup @ home"
    xrandr --output eDP-1 --off --output HDMI-2 --primary --mode ${mode}
elif xrandr | grep -q "DP-2-1 connected"; then
    echo "${setup}-setup @ office"
    xrandr --output eDP-1 --off --output DP-2-1 --primary --auto --mode ${mode} --output DP-2-2 --Off
elif xrandr | grep -q "DP-2-2 connected"; then
    echo "setup @ home docking station"
    xrandr--output eDP-1 --off --output DP-2-1 --off --output DP-2-2 --primary --auto --right-of eDP-1
else
    echo "${setup}-setup @ mobile"
    xrandr --output eDP-1 --primary --mode "${mode}"
fi

refresh_bg
}


monitors_external() {
    shutoff_all_screens
    # options
    setup="external"

    if xrandr | grep -q "HDMI-2 connected"; then
        echo "${setup}-setup @ home"
        xrandr --output eDP-1 --off --output HDMI-2 --primary --auto
    elif xrandr | grep -q "DP-2-2 connected"; then
        echo "${setup}-setup @ office"
        xrandr --output eDP-1 --off --output DP-2-1 --primary --auto --output DP-2-2 --auto
    else
        echo "${setup}-setup @ mobile"
        xrandr --output eDP-1 --primary --auto
    fi

    refresh_bg
}

monitors_all() {
    # shutoff_all_screens
    if xrandr | grep -q "HDMI-2 connected"; then
        echo "setup @ home"
        xrandr --output eDP-1 --auto --output HDMI-2 --primary --auto --right-of eDP-1
    elif xrandr | grep -q "DP-2-1 connected"; then
        echo "setup @ office"
        xrandr --output eDP-1 --auto --output DP-2-1 --primary --auto --right-of eDP-1 --output DP-2-2 --auto --right-of DP-2-1
    elif xrandr | grep -q "DP-2-2 connected"; then
        echo "setup @ home docking station"
        xrandr --output eDP-1 --auto --output DP-2-2 --primary --auto --right-of eDP-1
    else
        echo "setup @ mobile"
        xrandr --output eDP-1 --primary --auto
    fi

    refresh_bg
}

monitors_laptop() {
    shutoff_all_screens
    local screen_laptop
    screen_laptop="eDP-1"
    xrandr --output "${screen_laptop}" --mode 1920x1080 --primary
    sleep 1
    for other_screen in $(xrandr | awk '$2 ~ /^connected$/ { print $1 }' \
        | grep -vF "${screen_laptop}"); do
            xrandr --output "${other_screen}" --off
        done
    }


sshcontrol_toggle_confirm() {
    local path_sshcontrol="${HOME}/.gnupg/sshcontrol"

    mv "${path_sshcontrol}" "${path_sshcontrol}.old"
    toggle_ssh_key_confirm.awk "${path_sshcontrol}.old" > "${path_sshcontrol}" \
        && rm "${path_sshcontrol}.old"
}


alias refresh_monitors="monitors_default no_shutoff"

alias monitors_gaming_large="monitors_set_gaming gaming-large 1920x1080"
alias monitors_gaming_small="monitors_set_gaming gaming-small 1280x720"

alias audio_hdmi="pacmd set-card-profile alsa_card.pci-0000_00_1f.3 output:hdmi-stereo-extra1"
alias audio_regular="pacmd set-card-profile alsa_card.pci-0000_00_1f.3 output:analog-stereo+input:analog-stereo"
alias audio_setup_reverse="pacmd load-module module-remap-sink sink_name=nubert-reverse-stereo master=alsa_output.usb-BurrBrown_from_Texas_Instruments_USB_AUDIO_DAC-00.analog-stereo channels=2 master_channel_map=front-right,front-left channel_map=front-left,front-right"

alias git_proxy="git config --global http.proxy \"$http_proxy\""
alias git_no_proxy="git config --global --unset http.proxy"
alias rpushp="rpush -H root-p"


# vim: ft=sh
