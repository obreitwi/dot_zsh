
kth_show_failed_sims() {
	for f in $*; do
		if [ $(( `grep "Simulation runtime" $f/output/master.log 2>/dev/null | wc -l` )) -eq 0 ]; then
			echo $f
		fi
	done
}
zle -N kth_show_failed_sims

kth_show_failed_anas() {
	for f in $*; do
		if [ $(( `grep "Whole analysis" $f/output/analysis.log 2>/dev/null | wc -l` )) -eq 0 ]; then
			echo $f
		fi
	done
}
zle -N kth_show_failed_anas

kth_show_done_sims() {
	for f in $*; do
		if [ $(( `grep "Simulation runtime" $f/output/master.log 2>/dev/null | wc -l` )) -gt 0 ]; then
			echo $f
		fi
	done
}
zle -N kth_show_done_sims

kth_show_done_anas() {
	for f in $*; do
		if [ $(( `grep "Whole analysis" $f/output/analysis.log 2>/dev/null | wc -l` )) -gt 0 ]; then
			echo $f
		fi
	done
}
zle -N kth_show_done_anas


########
# SEMf #
########

show_failed_sims() {
	for f in $*; do
		if [ $(( `grep "Run completed." ${f:r}/data.log 2>/dev/null | wc -l` )) -eq 0 ]; then
			echo $f
		fi
	done
}
zle -N show_failed_sims

show_done_sims() {
	for f in $*; do
		if [ $(( `grep "Run completed." ${f:r}/data.log 2>/dev/null | wc -l` )) -gt 0 ]; then
			echo $f
		fi
	done
}
zle -N show_done_sims

show_failed_sims_folder() {
	for f in $*; do
		if [ $(( `grep "Run completed." $f/data.log 2>/dev/null | wc -l` )) -eq 0 ]; then
			echo $f
		fi
	done
}
zle -N show_failed_sims_folder

show_done_sims_folder() {
	for f in $*; do
		if [ $(( `grep "Run completed." $f/data.log 2>/dev/null | wc -l` )) -gt 0 ]; then
			echo $f
		fi
	done
}
zle -N show_done_sims_folder

get_active_eta() {
	if [[ $# -eq 0 ]]; then
		folders=("$(pwd)")
	else
		folders=($@[@])
	fi
	for jobid in $(get_job_ids); do
		file="slurm-$jobid.out"
		for folder in $folders; do
			filename="$folder/$file" 
			if [[ -a "$filename" ]]; then
				echo -n "$jobid: "
				grep ETA "$filename" | tail -n 1
			fi
		done
	done
}
zle -N get_active_eta

get_active_eta_short() {
	if [[ $# -eq 0 ]]; then
		print "Need at least one argument."
	fi
	local -a args
	args=($@[@])
	num_dirs=$args[0]
	args[0]=()
	get_active_eta $args[@] | sed "s:</\([^/]\+/\)\{$num_dirs\}:<(...):"
}
zle -N get_active_eta_short


show_failed_plots() {
	for f in $@; do
		plot_files=( ${f:r}/plots/{dii,dist}_*_-001.png )
		if [[ $#plot_files -eq 0 ]]; then
			echo $f
		fi
	done
}
zle -N show_failed_plots


show_rate_eta() {
	for jid in $(squeue -h -u $USER -t R -o %A); do
		eta=$(grep ETA slurm-${jid}.out | sed -e "s/.*\(Elapsed:.*\)$/\1/"| tail -1)
		file="slurm-$jid.out"
		rate=$(grep "</.*Avg rate net" slurm-$jid.out | tail -1 | sed -e "s:.*<\([A-Za-z0-9_-\/]\+\)>.*Avg rate net\: \(.*\)$:\2 \1:" | $(shorten_paths 11))
		echo "$rate $eta $file"
	done | sort -g
}
zle -N show_rate_eta

#########
# SLURM #
#########

show_job_detail() {
	for jobid in $(get_job_ids); do
		echo -n "$jobid\t"; scontrol show job $jobid | grep "^\s*$1=" | sed "s:^\s*$1=::"
	done
}
zle -N show_job_detail

show_job_commands() {
	show_job_detail Command
}
zle -N show_job_commands

get_job_ids() {
	squeue -h -u $USER -o %i
}
zle -N get_job_ids

shorten_paths() {
	num_squashed_paths=8
	if [[ $# -ge 1 ]]; then
		num_squashed_paths=$1
	fi
	echo sed "s:\(/[^/]\+\)\{$num_squashed_paths\}:(â€¦):g"
}
zle -N shorten_paths


# vim: ft=zsh
