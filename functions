# setting some default values
NOCOR=${NOCOR:-0}
NOMENU=${NOMENU:-0}
NOPRECMD=${NOPRECMD:-0}
COMMAND_NOT_FOUND=${COMMAND_NOT_FOUND:-0}
GRML_ZSH_CNF_HANDLER=${GRML_ZSH_CNF_HANDLER:-/usr/share/command-not-found/command-not-found}
BATTERY=${BATTERY:-0}
GRMLSMALL_SPECIFIC=${GRMLSMALL_SPECIFIC:-1}
GRML_ALWAYS_LOAD_ALL=${GRML_ALWAYS_LOAD_ALL:-0}
ZSH_NO_DEFAULT_LOCALE=${ZSH_NO_DEFAULT_LOCALE:-0}

#f2# Find history events by search pattern and list them by date.
whatwhen()  {
    emulate -L zsh
    local usage help ident format_l format_s first_char remain first last
    usage='USAGE: whatwhen [options] <searchstring> <search range>'
    #  help='Use' \`'whatwhen -h'\'' for further explanations.' # no idea why this doesn't work --obreitwi, 21-06-10 17:37:19
    ident=${(l,${#${:-Usage: }},, ,)}
    format_l="${ident}%s\t\t\t%s\n"
    format_s="${format_l//(\\t)##/\\t}"
    # Make the first char of the word to search for case
    # insensitive; e.g. [aA]
    first_char=[${(L)1[1]}${(U)1[1]}]
    remain=${1[2,-1]}
    # Default search range is `-1000'.
    first=${2:-\-1000}
    # Optional, just used for `<first> <last>' given.
    last=$3
    case $1 in
        ("")
            printf '%s\n\n' 'ERROR: No search string specified. Aborting.'
            printf '%s\n%s\n\n' ${usage} ${help} && return 1
        ;;
        (-h)
            printf '%s\n\n' ${usage}
            print 'OPTIONS:'
            printf $format_l '-h' 'show help text'
            print '\f'
            print 'SEARCH RANGE:'
            printf $format_l "'0'" 'the whole history,'
            printf $format_l '-<n>' 'offset to the current history number; (default: -100)'
            printf $format_s '<[-]first> [<last>]' 'just searching within a give range'
            printf '\n%s\n' 'EXAMPLES:'
            printf ${format_l/(\\t)/} 'whatwhen grml' '# Range is set to -1000 by default.'
            printf $format_l 'whatwhen zsh -250'
            printf $format_l 'whatwhen foo 1 99'
        ;;
        (\?)
            printf '%s\n%s\n\n' ${usage} ${help} && return 1
        ;;
        (*)
            # -l list results on stout rather than invoking $EDITOR.
            # -i Print dates as in YYYY-MM-DD.
            # -m Search for a - quoted - pattern within the history.
            fc -li -m "*${first_char}${remain}*" $first $last
        ;;
    esac
# }}}
}

# It's shameless stolen from <http://www.vim.org/tips/tip.php?tip_id=167>
#f5# Use \kbd{vim} as your manpage reader
vman() {
    emulate -L zsh
    man $* | col -b | view -c 'set ft=man nomod nolist' -
}

multicat() {
    for fname in $*; do
        for count in {0..$(( ${#fname} + 9 ))};do
            echo -n "#"
        done
        echo ""
        echo "# FILE: $fname #"
        for count in {0..$(( ${#fname} + 9 ))};do
            echo -n "#"
        done
        echo ""
        cat $fname
    done
}
zle -N multicat

setkipproxy() {
    export no_proxy="localhost,127.0.0.1,.kip.uni-heidelberg.de"
    export http_proxy=http://proxy2.kip.uni-heidelberg.de:8080
    export ftp_proxy=http://proxy2.kip.uni-heidelberg.de:21
    export https_proxy=http://proxy2.kip.uni-heidelberg.de:8080
}
zle -N setkipproxy


setnoproxy() {
    unset no_proxy
    unset http_proxy
    unset ftp_proxy
    unset https_proxy
}
zle -N setnoproxy

# print all arguments on new lines
printl() {
    for a in "$@"; do echo $a; done
}
zle -N printl

# print all arguments with pwd prepended
printp() {
    for a in "$@"; do echo $(pwd -P)/$a; done
}
zle -N printp
#
# print all arguments with custom prefix
printc() {
    for a in "${@:2}"; do echo $1/$a; done
}
zle -N printc

# cp a file, inserting the directory name into the real filename
# (implemented in python now)
# cpd () {
    # SRC=$1
    # TARGET_FOLDER=$2
    # filename=$(basename $SRC)
    # last_dir=$(basename $(dirname $SRC))
    # cp -v ${SRC} ${TARGET_FOLDER}/${last_dir}_${filename}
# }


# generate a random string of length $1
rstr() {
    if [[ $# > 0 ]]; then
        strlen="$1"
    else
        strlen="8"
    fi
    cat /dev/urandom 2>/dev/null | tr -cd "[:alnum:]" 2>/dev/null | head -c ${strlen}
}
zle -N rstr


popen() { 
    if [[ $# == 0 ]]; then
        ilab -ic "import cPickle as pickle";
    elif [[ $# == 1 ]]; then
        ipython -ic "import cPickle as pickle; ${1:t:r} = pickle.load( open( '${1}', 'r' ))"
    else
        ipython -ic "import cPickle as pickle; ${2} = pickle.load( open( '${1}', 'r' ))"
    fi
}
zle -N popen

foreground-vim() {
    fg %vim
}
zle -N foreground-vim
bindkey '^Z' foreground-vim

find_in_hist() {
    grep -ri $1 ~/.logs
}
alias fih=find_in_list

tmux-launch-and-configure() {
    tmux new-session -d -s $1
    tmux source "$HOME/.tmux/$1.conf"
    tmux attach -t $1
}

get-modeline() {
    cvt $1 $2 $3 | grep Modeline | sed -e "s/Modeline\s//"
}

slurm-get-job-ids() {
    if [[ $# > 1 ]]; then
        state=$1
    else
        state="PD"
    fi
    squeue -h | grep obreitwi | grep "\b$state\b" | cut -d " " -f 3
}

# nicer git log
gitlg() {
    PAGER=/usr/bin/less git log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit $@ --
}


svg_to_pdf() {
    for origin in "$@"; do
        extension=${origin:e}
        if [[ "$extension" != "svg" ]]; then
            echo "Wrong extension!" >&2
        else
            target="${origin:r}.pdf"
            inkscape --export-pdf="$target" --export-dpi=600 --export-area-page  $origin
        fi
    done
}

svg_to_png() {
    for origin in "$@"; do
        extension=${origin:e}
        if [[ "$extension" != "svg" ]]; then
            echo "Wrong extension!" >&2
        else
            target="${origin:r}.png"
            inkscape --export-png="$target" --export-dpi=600 --export-area-page  $origin
        fi
    done
}

to_mp3() {
    for origin in "$@"; do
        ffmpeg -i "${origin}" -vn -acodec libmp3lame -ac 2 -aq 0 -ar 48000 "${origin:t:r}.mp3"
    done
}

get_eta() {
    for f in "$@"; do
        grep "ETA" $f | tail -n 1
    done
}

uniq_lines() {
    cat -n $1 | sort -uk2 | sort -nk1 | cut -f2-
}

spack_modules() {
    TMPFILE="$(mktemp)"
    for mod in "$@"; do
        (echo "Loading $mod…" 1>&2)
        spack module loads -r $mod >> $TMPFILE
    done
    (echo "Committing…" 1>&2)
    uniq_lines $TMPFILE
    rm $TMPFILE
}

eg () {
        (( $+1 )) || {
                cat >&2 <<END
Usage: $0 [<args>...] [<expr>]

  args: Arguments to pass to man.
  expr: Command line argument to search for.
        Defaults to jump to the "EXAMPLE" section.

Examples:

  $0 find
  $0 less -s
  $0 1 less -s
  $0 zshall HIST_IGNORE_SPACE
  $0 zshall fc
END
                return 1
        }
        local expr='^EXAMPLE'
        local -a args
        args=("$@")
        (( $+2 )) && {
                expr="^[[:blank:]]*${@[-1]}"
                args=("${@[1,-2]}")
        }
        PAGER="less -g -s '+/$expr'" man "${=args}"
}

spack_load() {
    source =(spack_modules "$@")
}

cat_pkl() {
    for f in "$@"; do
        python -c "import cPickle as pkl, pprint; pprint.pprint(pkl.load(open('${f}', 'r')))"
    done
}

gerrit_fetch_changesets() { 
    remote="review"
    localbranchname=gerrit_tree_view

    gerrit_remote=$(git config --local remote.review.url)
    elements=("${(@s:/:)gerrit_remote}")
    gerrit_project=${elements[-1]}
    elements[-1]=()
    gerrit_url=${(j./.)elements}

    elements=("${(@s.:.)gerrit_url}")
    gerrit_port=${elements[-1]}
    gerrit_url=${${elements[-2]}:gs./.}

    git branch -D $(git branch | grep "$localbranchname") &> /dev/null
    ssh -p ${gerrit_port} ${gerrit_url} gerrit query "project:${gerrit_project} status:open" --current-patch-set | sed -n 's/\s*ref: //p' | while read REF
do
    git fetch "${remote}" "${REF}"
    git branch $(echo "${REF}" | sed "s#refs/changes/../#${localbranchname}/#") FETCH_HEAD
done
}

gen_ssha512() {
    local pw="$1"
    while [ -z "${pw}" ]; do
        echo -n "Password: "
        read -s pw_1
        echo ""
        echo -n "Password (repeat): "
        read -s pw_2
        echo ""
        if [[ "${pw_1}" = "${pw_2}" ]] && [[ "${pw_2}" = "${pw_2}" ]]; then
            pw="${pw_1}"
        fi
    done
    local salt=$(cat /dev/urandom | head -c 8)
    (
        echo -n "${pw}${salt}" | openssl dgst -sha512 -binary
        echo -n ${salt}
    ) | openssl enc -a -A | awk '{ print "{SSHA512}"$0 }'
}

startx_wifi()) {
    # start the xserver with a given wifi profile
    sudo netctl start "${1}" &; startx 
}


# vim: ft=zsh
